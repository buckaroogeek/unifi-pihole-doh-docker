# Derived from example provided by Tony Lawrence - see
# http://tonylawrence.com/posts/unix/synology/free-your-synology-ports/
#
# Extended to include multiple services using a separate macvlan
# Macvlan provides unique IP addresses for each container.
#

version: '2.2'

services:
  pihole:     #Pi Hole dns server for local network
    container_name: SageCreek-Pi-Hole
    image: pihole/pihole:latest
    hostname: pihole
    domainname: lan
    mac_address: d0:ca:ab:cd:ef:01
    cap_add:
      - NET_ADMIN
    networks:
      macvlan1:
        ipv4_address: 192.168.110.201   #Â <-- Update
    volumes:
      - /volume1/docker/pihole/pihole-configs:/etc/pihole/:rw
      - /volume1/docker/pihole/dnsmasq.d-configs:/etc/dnsmasq.d/:rw
    dns:
      - 127.0.0.1
      - 8.8.8.8
    ports:
      - 443/tcp
      - 53/tcp
      - 53/udp
      # - 67/udp  # uncomment to use pi-hole for dhcp
      - 80/tcp
      - 22/tcp
    environment:
      ServerIP: 192.168.110.201 # <-- Update (match ipv4_address)
      VIRTUAL_HOST: pihole.lan  # <-- Update (match hostname + domainname)
      WEBPASSWORD: "quga5RHDI@" # <-- Add password (if required)
    restart: unless-stopped
    #  dnscrypt:
      #    container_name: SageCreek-DNSCrypt
      #    image: jedisct1/dnscrypt-server:latest
      #    command: init -N dns.lan -E '192.168.110.203:443'
      #    mac_address: d0:ca:ab:cd:ef:03
      #    hostname: dns
      #    domainname: lan
      #    init: true
      #    ports:
        #      - 443/tcp
        #      - 443/udp
        #    networks:
          #      macvlan1:
            #        ipv4_address: 192.168.110.203
            #    ulimits:
              #      nofile:
                #        soft: 90000
        #        hard: 90000
        #    volumes:
          #      - /volume1/docker/dnscrypt/keys:/opt/encrypted-dns/etc/keys:rw
          #    restart: unless-stopped
  registry:      # Docker registry server for local development
    container_name: SageCreek-Registry
    restart: unless-stopped
    image: registry:2
    hostname: reg
    domainname: lan
    mac_address: d0:ca:ab:cd:ef:10
    networks:
      macvlan1:
        ipv4_address: 192.168.110.210
    ports:
      - 5000/tcp
      - 5000/udp
    volumes:
      - /volume1/docker/registry:/var/lib/registry
  mongo:
    image: mongo:3.4
    container_name: SageCreek-Mongo
    mac_address: d0:ca:ab:cd:ef:ab
    networks:
      macvlan1:
        ipv4_address: 192.168.110.215
    restart: unless-stopped
    volumes:
      - /volume1/docker/mongo/db:/data/db
  unifi:
    image: jacobalberty/unifi:latest
    container_name: SageCreek-Unifi-Controller
    hostname: unifi2
    domainname: lan
    mac_address: d0:ca:ab:cd:ef:ac
    depends_on:
      - mongo
    init: true
    networks:
      macvlan1:
        ipv4_address: 192.168.110.216
    restart: unless-stopped
    volumes:
      - /volume1/docker/unifi/data:/unifi/data
      - /volume1/docker/unifi/log:/unifi/log
      - /volume1/docker/unifi/cert:/unifi/cert
      - /volume1/docker/unifi/init.d:/unifi/init.d
    environment:
      DB_URI: mongodb://mongo/unifi
      STATDB_URI: mongodb://mongo/unifi_stat
      DB_NAME: unifi
      TZ: America/Pacific
      UNIFI_HTTP_PORT: 80
      UNIFI_HTTPS_PORT: 443
      #RUNAS_UID0: false
      #UNIFI_UID: 1029
      #UNIFI_GID: 65537
    ports:
      - "1900/udp" # L2 discovery
      - "3478/udp" # STUN
      - "6789/tcp" # Speed test
      - "80/tcp" # Device/ controller comm.
      - "443/tcp" # Controller GUI/API as seen in a web browser
      - "8880/tcp" # HTTP portal redirection
      - "8843/tcp" # HTTPS portal redirection
      - "10001/udp" # AP discovery
      - "27117/tcp" # DB communications
  logs:
    image: bash
    container_name: SageCreek-Unifi-Logs
    mac_address: d0:ca:ab:cd:ef:ad
    depends_on:
      - unifi
    command: bash -c 'tail -F /unifi/log/*.log'
    restart: unless-stopped
    volumes:
      - /volume1/docker/unifi/log:/unifi/log

networks:
  macvlan1:
    driver: macvlan
    driver_opts:
      parent: eth0
    ipam:
      config:
        - subnet: 192.168.110.0/24            # <-- Update
          gateway: 192.168.110.1              # <-- Update
          ip_range: 192.168.110.192/26        # <-- Update
          aux_addresses:
            -host: 192.168.110.193

